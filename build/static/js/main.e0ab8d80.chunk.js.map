{"version":3,"sources":["components/Search.js","components/Details.js","components/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","styled","SearchBox","HitItemWrapper","div","Hit","hit","href","name","tabIndex","HitList","Hits","SearchWrapper","searchClient","algoliasearch","Search","InstantSearch","indexName","hitComponent","DetailWrapper","IntroWrapper","StatsWrapper","Description","p","Details","props","monster","includes","replace","dbModule","find","findByName","description","elements","locations","ailments","resistances","weaknesses","type","species","rewards","length","sort","a","b","stars","map","weak","key","element","repeat","res","condition","el","loc","id","ail","rwd","onClick","navigate","NotFoundPage","TempWrapper","routes","App","routeResult","useRoutes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0ab8d80.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport algoliasearch from 'algoliasearch/lite'\nimport { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom'\nimport { A } from 'hookrouter'\n\nconst SearchInput = styled(SearchBox)`\n  input {\n    color: white;\n    font-size: 2em;\n    height: 50px;\n    width: 300px;\n    border: solid 0.5px slategrey;\n    outline: 1px double #333;\n    outline-offset: 3px;\n    background-image: linear-gradient(to top, #000 30%, #1d4753 100%);\n  }\n\n  input:hover {\n    box-shadow: 1px 0px 0px 3px #2e5d34;\n  }\n\n  li:focus {\n    box-shadow: 1px 0px 0px 3px #2e5d34;\n  }\n`\n\nconst HitItemWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 45px;\n  padding: 5px;\n  margin-top: 1px;\n  margin-bottom: 1px;\n  border-top: dashed 1px slategrey;\n  :focus {\n    outline: none;\n  }\n  :hover {\n    border-top: solid 1px rgba(105, 181, 100, 1);\n    border-bottom: solid 1px rgba(105, 181, 100, 1);\n  }\n`\n\nconst Hit = ({ hit }) => (\n  <A href={`/${hit.name}`}><HitItemWrapper tabIndex='0'>{hit.name}</HitItemWrapper></A>\n)\n\nconst HitList = styled(Hits)`\n  background: rgba(0, 0, 0, 0.6);\n  width: 300px;\n  color: #fafafa;\n\n  ul {\n    margin: 5px;\n    padding-left: 5px;\n  }\n\n  li {\n    list-style: none;\n    text-shadow: 0 -1px 0 #fff;\n  }\n  li:hover {\n    background: linear-gradient(\n      to right,\n      rgba(0, 0, 0, 0.6) 0%,\n      rgba(105, 181, 100, 1) 30%,\n      rgba(0, 0, 0, 0.6) 90%\n    );\n    outline: none;\n  }\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n`\n\nconst SearchWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 400px;\n  width: 1000px;\n  margin-top: 10px;\n  margin-left: 10px;\n  overflow: hidden;\n`\n\nconst searchClient = algoliasearch(\n  'MT2HPEHTBE',\n  '91b84fdc5b74fbe6ecc908f7738f0e82'\n)\n\n// TODO make it keyboard navigable\n\nconst Search = () => {\n  return (\n    <SearchWrapper>\n      <InstantSearch searchClient={searchClient} indexName='dev_MHW-Monsters'>\n        <SearchInput />\n        <HitList hitComponent={Hit} />\n      </InstantSearch>\n    </SearchWrapper>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\nimport { navigate } from 'hookrouter'\nimport * as dbModule from '../lib/db/mhw-all-monsters-1567568189811.json'\n\n\nfunction findByName(name) {\n  if (name.includes('%20')) {\n    name = name.replace('%20', ' ')\n  }\n  const db = dbModule.default\n  const found = db.find(monster => monster.name === name)\n  return found\n}\n\nconst DetailWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 600px;\n  width: 1000px;\n  margin-top: 10px;\n  margin-left: 10px;\n  overflow: hidden;\n  background: rgba(0,0,0,0.8);\n  color: white;\n`\n\nconst IntroWrapper = styled.div`\n  padding: 10px;\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto;\n  table {\n    text-align: center;\n  }\n`\n\nconst StatsWrapper = styled.div`\n  margin-left: 10px;\n  display: grid;\n  grid-template-rows: auto;\n  grid-template-columns: 1fr 1fr;\n  li {\n    list-style: none;\n  }\n`\n\nconst Description = styled.p`\n  padding-left: 10px;\n`\n\n// const BackButton = styled.button`\n// `\n\n// const TacticalStats = styled.div``\n\nconst Details = (props) => {\n  // console.log('props', props)\n  const monster = findByName(props.name)\n  // console.log(monster)\n  const { name, description, elements, locations, ailments, \n        resistances, weaknesses, type, species, rewards } = monster\n\n\n  // TODO clean this up\n  return (\n    <DetailWrapper>\n      <IntroWrapper>\n        <h1>{name}</h1>\n        <Description>{description}</Description>\n        <table>\n          <tbody>\n            <tr>\n              <th>Species</th>\n              <th>Type</th>\n            </tr>\n            <tr>\n              <td>{species}</td>\n              <td>{type}</td>\n            </tr>\n          </tbody>\n        </table>\n      </IntroWrapper>\n      <StatsWrapper>\n        <div>\n          <h2>Weaknesses</h2>\n          <ul>\n          {(weaknesses && weaknesses.length > 0) ? weaknesses\n          .sort((a, b) => (a.stars > b.stars) ? -1 : 1)\n          .map(weak => {\n            return (\n              <li key={weak.element}>\n                {weak.element} {\"‚≠ê\".repeat(weak.stars)}\n              </li>\n            )\n          }) : ''}\n          </ul>\n          <h2>Resistances</h2>\n          <ul>\n            {(resistances && resistances.length > 0) ? resistances.map(res => {\n              return (\n                <li key={res.element}>\n                  {res.element} {res.condition && `when ${res.condition}`}\n                </li>\n              )\n            }) : ''}\n            </ul>\n          <h2>Elements</h2>\n          <ul>\n            {(elements && elements.length > 0) ? elements.map(el => {\n              return (\n                <li key={el}>\n                  {el}\n                </li>\n              )\n            }) : ''}\n          </ul>\n        </div>\n        <div>\n          <h2>Locations</h2>\n          <ul>\n            {(locations && locations.length > 0) ? locations.map(loc => {\n              return (\n                <li key={loc.id}>{loc.name}</li>\n              )\n            }) : ''}\n          </ul>\n          <h2>Ailments</h2>\n          <ul>\n            {(ailments && ailments.length > 0) ? ailments.map(ail => {\n              return (\n                <li key={ail.id}>\n                  {ail.name}\n                </li>\n                )\n              }) : ''}\n          </ul>\n          <h2>Rewards</h2>\n          <ul>\n            {(rewards && rewards.length > 0) ? rewards.map(rwd => {\n              return (\n                <li key={rwd.id}>\n                  {rwd.name}\n                </li>\n              )\n            }) : ''}\n          </ul>\n        </div>\n      </StatsWrapper>\n      <div>\n        <button onClick={() => navigate('/')}>Back</button>\n      </div>\n    </DetailWrapper>\n  )\n}\n\nexport default Details","import React from 'react'\n\nconst NotFoundPage = () => (\n  <p>Page not found. Wanna go back home?</p>\n)\n\nexport default NotFoundPage","import React from 'react'\nimport Search from './components/Search'\nimport Details from './components/Details'\nimport NotFoundPage from './components/NotFoundPage'\nimport styled from 'styled-components'\nimport { useRoutes } from 'hookrouter'\n\nconst TempWrapper = styled.div`\n  height: 100vh;\n  width: 100%;\n  padding-top: 5rem;\n  padding-right: 7rem;\n  padding-bottom: 5rem;\n  /* background-image: url('/img/samplescreen.png'); */\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n`\n\nconst routes = {\n    '/': () => <Search />,\n    '/:name': ({name}) => <Details name={name} />\n};\n\nfunction App() {\n  const routeResult = useRoutes(routes);\n  return (\n    <TempWrapper>\n      { routeResult || <NotFoundPage /> }\n    </TempWrapper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}